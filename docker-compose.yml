version: '3.8'

services:
  # Laravel Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: klgestorpub_app
    restart: unless-stopped
    working_dir: /var/www/html
    volumes:
      - ./:/var/www/html
      - ./storage:/var/www/html/storage
      - ./bootstrap/cache:/var/www/html/bootstrap/cache
    environment:
      - APP_ENV=local
      - APP_DEBUG=true
      - DB_HOST=mysql
      - DB_DATABASE=klgestorpub
      - DB_USERNAME=klgestorpub
      - DB_PASSWORD=klgestorpub_password
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      - mysql
      - redis
    networks:
      - klgestorpub_network

  # Nginx Web Server
  nginx:
    image: nginx:alpine
    container_name: klgestorpub_nginx
    restart: unless-stopped
    ports:
      - "8080:80"
      - "8443:443"
    volumes:
      - ./:/var/www/html
      - ./deployment/docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./deployment/docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./storage/logs/nginx:/var/log/nginx
    depends_on:
      - app
    networks:
      - klgestorpub_network

  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: klgestorpub_mysql
    restart: unless-stopped
    ports:
      - "3306:3306"
    environment:
      MYSQL_DATABASE: klgestorpub
      MYSQL_USER: klgestorpub
      MYSQL_PASSWORD: klgestorpub_password
      MYSQL_ROOT_PASSWORD: root_password
      MYSQL_ALLOW_EMPTY_PASSWORD: 'no'
    volumes:
      - mysql_data:/var/lib/mysql
      - ./deployment/docker/mysql/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./deployment/docker/mysql/my.cnf:/etc/mysql/conf.d/my.cnf
    command: --default-authentication-plugin=mysql_native_password
    networks:
      - klgestorpub_network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: klgestorpub_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./deployment/docker/redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - klgestorpub_network

  # Node.js for asset compilation (development)
  node:
    image: node:18-alpine
    container_name: klgestorpub_node
    working_dir: /var/www/html
    volumes:
      - ./:/var/www/html
    command: sh -c "npm install && npm run dev"
    profiles:
      - development
    networks:
      - klgestorpub_network

  # Mailhog for email testing (development)
  mailhog:
    image: mailhog/mailhog:latest
    container_name: klgestorpub_mailhog
    restart: unless-stopped
    ports:
      - "1025:1025"
      - "8025:8025"
    profiles:
      - development
    networks:
      - klgestorpub_network

  # phpMyAdmin for database management (development)
  phpmyadmin:
    image: phpmyadmin/phpmyadmin:latest
    container_name: klgestorpub_phpmyadmin
    restart: unless-stopped
    ports:
      - "8081:80"
    environment:
      PMA_HOST: mysql
      PMA_USER: klgestorpub
      PMA_PASSWORD: klgestorpub_password
      MYSQL_ROOT_PASSWORD: root_password
    depends_on:
      - mysql
    profiles:
      - development
    networks:
      - klgestorpub_network

# Named Volumes
volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local

# Networks
networks:
  klgestorpub_network:
    driver: bridge

# Production override
# Use: docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d